/* soapWalabotServiceSoapProxy.cpp
   Generated by gSOAP 2.8.79 for walabotservice.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapWalabotServiceSoapProxy.h"
#include "logger.h"
WalabotServiceSoapProxy::WalabotServiceSoapProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	WalabotServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

WalabotServiceSoapProxy::WalabotServiceSoapProxy(const WalabotServiceSoapProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

WalabotServiceSoapProxy::WalabotServiceSoapProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	WalabotServiceSoapProxy_init(_soap->imode, _soap->omode);
}

WalabotServiceSoapProxy::WalabotServiceSoapProxy(struct soap *_soap, const char *soap_endpoint_url)
{	this->soap = _soap;
	this->soap_own = false;
	WalabotServiceSoapProxy_init(_soap->imode, _soap->omode);
	soap_endpoint = soap_endpoint_url;
}

WalabotServiceSoapProxy::WalabotServiceSoapProxy(const char *soap_endpoint_url)
{	this->soap = soap_new();
	this->soap_own = true;
	WalabotServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = soap_endpoint_url;
}

WalabotServiceSoapProxy::WalabotServiceSoapProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	WalabotServiceSoapProxy_init(iomode, iomode);
}

WalabotServiceSoapProxy::WalabotServiceSoapProxy(const char *soap_endpoint_url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	WalabotServiceSoapProxy_init(iomode, iomode);
	soap_endpoint = soap_endpoint_url;
}

WalabotServiceSoapProxy::WalabotServiceSoapProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	WalabotServiceSoapProxy_init(imode, omode);
}

WalabotServiceSoapProxy::~WalabotServiceSoapProxy()
{	if (this->soap_own)
	{	this->destroy();
		soap_free(this->soap);
	}
}

void WalabotServiceSoapProxy::WalabotServiceSoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL },
        { "SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "ns1", "http://tempuri.org/", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

WalabotServiceSoapProxy *WalabotServiceSoapProxy::copy()
{	WalabotServiceSoapProxy *dup = SOAP_NEW_UNMANAGED(WalabotServiceSoapProxy);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}

WalabotServiceSoapProxy& WalabotServiceSoapProxy::operator=(const WalabotServiceSoapProxy& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
		this->soap_endpoint = rhs.soap_endpoint;
	}
	return *this;
}

void WalabotServiceSoapProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void WalabotServiceSoapProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	WalabotServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void WalabotServiceSoapProxy::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *WalabotServiceSoapProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *WalabotServiceSoapProxy::soap_fault()
{	return this->soap->fault;
}

const char *WalabotServiceSoapProxy::soap_fault_subcode()
{	return ::soap_fault_subcode(this->soap);
}

const char *WalabotServiceSoapProxy::soap_fault_string()
{	return ::soap_fault_string(this->soap);
}

const char *WalabotServiceSoapProxy::soap_fault_detail()
{	return ::soap_fault_detail(this->soap);
}

int WalabotServiceSoapProxy::soap_close_socket()
{	return ::soap_closesock(this->soap);
}

int WalabotServiceSoapProxy::soap_force_close_socket()
{	return ::soap_force_closesock(this->soap);
}

void WalabotServiceSoapProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void WalabotServiceSoapProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *WalabotServiceSoapProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int WalabotServiceSoapProxy::send_SensorDoWork(const char *soap_endpoint_url, const char *soap_action, _ns1__SensorDoWork *ns1__SensorDoWork)
{

    Logger("send_SensorDoWork is called");
	struct __ns1__SensorDoWork soap_tmp___ns1__SensorDoWork;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/WalabotService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/SensorDoWork";

	soap_tmp___ns1__SensorDoWork.ns1__SensorDoWork = ns1__SensorDoWork;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__SensorDoWork(soap, &soap_tmp___ns1__SensorDoWork);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SensorDoWork(soap, &soap_tmp___ns1__SensorDoWork, "-ns1:SensorDoWork", "")
		 || soap_body_end_out(soap)
         || soap_envelope_end_out(soap))
        {
             Logger("send_SensorDoWork is ERROR called");
             return soap->error;
        }
	}
    if (soap_end_count(soap)){
        Logger("send_SensorDoWork is  (soap_end_count) ERROR called");
		return soap->error;
    }
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SensorDoWork(soap, &soap_tmp___ns1__SensorDoWork, "-ns1:SensorDoWork", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
     || soap_end_send(soap)){
        Logger("send_SensorDoWork is  (soap_closesock) ERROR called");
        return soap_closesock(soap);
    }
	return SOAP_OK;
}

int WalabotServiceSoapProxy::recv_SensorDoWork(_ns1__SensorDoWorkResponse &ns1__SensorDoWorkResponse)
{
	ns1__SensorDoWorkResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SensorDoWorkResponse.soap_get(soap, "ns1:SensorDoWorkResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WalabotServiceSoapProxy::send_HelloWorld(const char *soap_endpoint_url, const char *soap_action, _ns1__HelloWorld *ns1__HelloWorld)
{
	struct __ns1__HelloWorld soap_tmp___ns1__HelloWorld;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/WalabotService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/HelloWorld";
	soap_tmp___ns1__HelloWorld.ns1__HelloWorld = ns1__HelloWorld;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__HelloWorld(soap, &soap_tmp___ns1__HelloWorld);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__HelloWorld(soap, &soap_tmp___ns1__HelloWorld, "-ns1:HelloWorld", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__HelloWorld(soap, &soap_tmp___ns1__HelloWorld, "-ns1:HelloWorld", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int WalabotServiceSoapProxy::recv_HelloWorld(_ns1__HelloWorldResponse &ns1__HelloWorldResponse)
{
	ns1__HelloWorldResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__HelloWorldResponse.soap_get(soap, "ns1:HelloWorldResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WalabotServiceSoapProxy::send_SensorDoWork_(const char *soap_endpoint_url, const char *soap_action, _ns1__SensorDoWork *ns1__SensorDoWork)
{
    Logger("send_SensorDoWork is called");
	struct __ns1__SensorDoWork_ soap_tmp___ns1__SensorDoWork_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/WalabotService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/SensorDoWork";
	soap_tmp___ns1__SensorDoWork_.ns1__SensorDoWork = ns1__SensorDoWork;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__SensorDoWork_(soap, &soap_tmp___ns1__SensorDoWork_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SensorDoWork_(soap, &soap_tmp___ns1__SensorDoWork_, "-ns1:SensorDoWork", "")
		 || soap_body_end_out(soap)
         || soap_envelope_end_out(soap))
        {
            Logger("send_SensorDoWork is ERROR called");
            return soap->error;
        }

	}
    if (soap_end_count(soap)){
        Logger("send_SensorDoWork is (soap_end_count) ERROR called");
        return soap->error;
    }
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SensorDoWork_(soap, &soap_tmp___ns1__SensorDoWork_, "-ns1:SensorDoWork", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
     || soap_end_send(soap)){
        Logger("send_SensorDoWork is (soap_closesock) ERROR called");
        return soap_closesock(soap);
    }
	return SOAP_OK;
}

int WalabotServiceSoapProxy::recv_SensorDoWork_(_ns1__SensorDoWorkResponse &ns1__SensorDoWorkResponse)
{
	ns1__SensorDoWorkResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SensorDoWorkResponse.soap_get(soap, "ns1:SensorDoWorkResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WalabotServiceSoapProxy::send_HelloWorld_(const char *soap_endpoint_url, const char *soap_action, _ns1__HelloWorld *ns1__HelloWorld)
{
	struct __ns1__HelloWorld_ soap_tmp___ns1__HelloWorld_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/WalabotService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/HelloWorld";
	soap_tmp___ns1__HelloWorld_.ns1__HelloWorld = ns1__HelloWorld;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__HelloWorld_(soap, &soap_tmp___ns1__HelloWorld_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__HelloWorld_(soap, &soap_tmp___ns1__HelloWorld_, "-ns1:HelloWorld", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__HelloWorld_(soap, &soap_tmp___ns1__HelloWorld_, "-ns1:HelloWorld", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int WalabotServiceSoapProxy::recv_HelloWorld_(_ns1__HelloWorldResponse &ns1__HelloWorldResponse)
{
	ns1__HelloWorldResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__HelloWorldResponse.soap_get(soap, "ns1:HelloWorldResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
